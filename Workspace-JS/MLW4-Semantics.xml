<export><workspace name="MLW4-Semantics"><query name="Enable Triple Index" focus="false" active="true" content-source="as:11162580126874597628:" mode="xquery">(: Output should be 'your query returned an empty sequence' :)

xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";
(: Get the configuration :)
let $config := admin:get-configuration()
let $Sample-Database := xdmp:database()
let $c := admin:database-set-triple-index($config, $Sample-Database, fn:true())
return (
   temporal:set-use-lsqt("myTemporal",fn:true()),
   admin:save-configuration($c)
)</query><query name="Luna in SFO" focus="false" active="true" content-source="as:11162580126874597628:" mode="javascript">// Output should be 'your query returned an empty sequence'

declareUpdate();

// Luna lived in San Francisco between 2001 and 2005. 
// We recorded this on 2006-01-01T00:00:00Z
var root = {
  "sysStart": null,
  "sysEnd": null,
  "valStart": "2001-01-01T00:00:00Z",
  "valEnd": "2006-01-01T00:00:00Z",
  "Comments": "Luna lived in SFO between 2001-01-01T00:00:00Z and 2006-01-01T00:00:00Z",
  "triples" :
  [
    {
      "triple" : {
        "subject" : {"value" : "Luna", "datatype" : "http://www.w3.org/2001/XMLSchema#string"},
        "predicate" : "city",     // predicates need to be iri for SPARQL queries to work
        "object" : {"value" : "San Francisco", "datatype" : "http://www.w3.org/2001/XMLSchema#string"}
      }
    },
    {
      "triple" : {
        "subject" : {"value" : "San Francisco", "datatype" : "http://www.w3.org/2001/XMLSchema#string"},
        "predicate" : "state",     // predicates need to be iri for SPARQL queries to work
        "object" : {"value" : "California", "datatype" : "http://www.w3.org/2001/XMLSchema#string"}
      }
    }
  ]
}
    
temporal.documentInsert("myTemporal","triples.json",root)
temporal.statementSetSystemTime("2006-01-01T00:00:00Z")</query><query name="Luna Moved to Denver" focus="false" active="true" content-source="as:11162580126874597628:" mode="javascript">// Output should be 'your query returned an empty sequence'

declareUpdate();

// Luna moved in Denver on 2004-01-01T00:00:00Z and lived there until 2007-01-01T00:00:00Z. 
// We knew about this on 2008-01-01T00:00:00Z
var root = {
  "sysStart": null,
  "sysEnd": null,
  "valStart": "2004-01-01T00:00:00Z",
  "valEnd": "2007-01-01T00:00:00Z",
  "Comments": "Luna lived in Denver between 2004-01-01T00:00:00Z and 2007-01-01T00:00:00",
  "triples" :
  [
    {
      "triple" : {
        "subject" : {"value" : "Luna", "datatype" : "http://www.w3.org/2001/XMLSchema#string"},
        "predicate" : "http://www.w3.org/ns/prov#livesin",     // predicates need to be iri for SPARQL queries to work
        "object" : {"value" : "Denver", "datatype" : "http://www.w3.org/2001/XMLSchema#string"}
      }
    },
    {
      "triple" : {
        "subject" : {"value" : "Denver", "datatype" : "http://www.w3.org/2001/XMLSchema#string"},
        "predicate" : "state",     // predicates need to be iri for SPARQL queries to work
        "object" : {"value" : "Colorado", "datatype" : "http://www.w3.org/2001/XMLSchema#string"}
      }
    }
  ]
}
temporal.documentInsert("myTemporal","triples.json",root)
temporal.statementSetSystemTime("2008-01-01T00:00:00Z")</query><query name="BiTemporal Query" focus="false" active="true" content-source="7900001892146779296:0:Apps" mode="javascript">// Query bi-temporally. Output should be 3 documents
//   1. What we know since 2008-01-01T00:00:00Z. That Luna lived in Denver between 2004-01-01T00:00:00Z and 2007-01-01T00:00:00Z
//   2. What we knew between 2006-01-01T00:00:00Z and 2008-01-01T00:00:00Z. That Luna lived in San Francisco between 2001-01-01T00:00:00Z and 2006-01-01T00:00:00Z
//   3. What we know between 2008-01-01T00:00:00Z and now. That Luna lived in San Francisco between 2001-01-01T00:00:00Z and 2004-01-01T00:00:00Z

cts.search(
  cts.andQuery((
    cts.collectionQuery('myTemporal'),
    cts.periodRangeQuery(
      "myValid",
      "ISO_OVERLAPS",
      cts.period(xs.dateTime("2001-04-03T16:10:00Z"),
                 xs.dateTime("2014-04-03T16:12:00Z")) )
  ))
)</query><query name="Where Luna Lived in 2002" focus="false" active="true" content-source="as:11162580126874597628:" mode="javascript">// Which city, state did Luna live in 2002. City and state info comes from triples
// Should return San Francisco as the city and California as the state

var q = 'SELECT \
    ?city ?state \
  WHERE {  \
    "Luna" &lt;city&gt; ?city . \
    ?city &lt;state&gt; ?state .  \
  } \
';

sem.sparql(
    q,
    null,
    null,
    sem.store(
      null,
      cts.andQuery((
        cts.collectionQuery("myTemporal"),
        cts.periodRangeQuery(
          "myValid",
          "ALN_CONTAINS",
          cts.period(
            xs.dateTime("2002-01-01T00:00:00Z") ))
      ))
    )
  )</query><query name="Where Luna lived  between 2000 &amp; 2007" focus="false" active="true" content-source="as:11162580126874597628:" mode="javascript">// Which cities and states did Luna live in between 2000 and 2006. City, state info comes from triples
// Should return San Francisco as the city and California as the state

var q = 'SELECT \
    ?city ?state \
  WHERE {  \
    "Luna" &lt;city&gt; ?city . \
    ?city &lt;state&gt; ?state .  \
  } \
';


sem.sparql(
    q,
    null,
    null,
    sem.store(
      null,
      cts.andQuery((
        cts.collectionQuery("myTemporal"),
        cts.periodRangeQuery(
          "myValid",
          "ISO_OVERLAPS",
          cts.period(
            xs.dateTime("2000-01-01T00:00:00Z"),
            xs.dateTime("2007-01-01T00:00:00Z")) )
      ))
    )
  )</query><query name="In 2006, what did we know about where Eva lived" focus="false" active="false" content-source="13199000469121224597:0:Apps" mode="xquery">(: What did I know between during the year 2006 about where Luna lived. We search on system time. City, state info comes from triples :)

import module namespace sem = "http://marklogic.com/semantics" at "MarkLogic/semantics.xqy";

let $q := '
  SELECT 
    ?city ?state
  WHERE {
    "Luna" &lt;city&gt; ?city .
    ?city &lt;state&gt; ?state . 
  }
'
return
  sem:sparql(
    $q,
    (),
    (),
    sem:store(
      (),
      cts:period-range-query(
        "system",
        "ISO_CONTAINS",
        cts:period(
          xs:dateTime("2006-01-01T00:00:00Z")) )
      )
    )</query><query name="In 2007, what we did know about where Eva lived" focus="false" active="true" content-source="as:11162580126874597628:" mode="javascript">// What did I know during the year 2007 about where Luna lived. We search on system time 
// At this time, we know that Luna lived in SFO and Denver. City, state info comes from triples
// Should return San Francisco as the city and California as the state

var q = 'SELECT \
    ?city ?state \
  WHERE {  \
    "Luna" &lt;city&gt; ?city . \
    ?city &lt;state&gt; ?state .  \
  } \
';

sem.sparql(
  q,
  null,
  null,
  sem.store(
    null,
    cts.andQuery((
      cts.collectionQuery("myTemporal"),
      cts.periodRangeQuery(
        "mySystem",
        "ISO_CONTAINS",
        cts.period(
          xs.dateTime("2007-01-01T00:00:00Z")) )
    ))
  )
)</query><query name="In 2007, what we did know between 2004 and 2005" focus="false" active="true" content-source="as:11162580126874597628:" mode="javascript">// What did I know  during the year 2007-01-01T00:00:00Z about where Luna lived between 2004 and 2005. We search on 
// system time and valid time. 
// We did not know until 2008-01-01T00:00:00Z, that Luna moved to Colorado and stayed there between 
// 2004-01-01T00:00:00Z and 2007-01-01T00:00:00
// So, on 2007-01-01T00:00:00Z, we only knew that Luna lived in San Francisco
   
var q = 'SELECT \
    ?city ?state \
  WHERE {  \
    "Luna" &lt;city&gt; ?city . \
    ?city &lt;state&gt; ?state .  \
  } \
';

sem.sparql(
  q,
  null,
  null,
  sem.store(
    null,
    cts.andQuery((
      cts.collectionQuery("myTemporal"),
      cts.periodRangeQuery(
        "mySystem",
        "ISO_CONTAINS",
        cts.period(
          xs.dateTime("2008-01-01T00:00:00Z")) ),
      cts.periodRangeQuery(
        "myValid",
        "ISO_CONTAINS",
        cts.period(
          xs.dateTime("2004-01-01T00:00:00Z"),            
          xs.dateTime("2005-01-01T00:00:00Z")) )
    ))            
  )
)

 </query><query name="In 2009, what we did know between 2004 and 2005" focus="false" active="true" content-source="13199000469121224597:0:Apps" mode="javascript">// What did I know  during the year 2009-01-01T00:00:00Z about where Luna lived between 2004 and 2005. We search on 
// system time and valid time
// We knew on 2008-01-01T00:00:00Z, that Luna moved to Colorado and stayed there between 2004-01-01T00:00:00Z and 2007-01-01T00:00:00
// Should return San Francisco as the city and California as the state AND
// Should return Denver as the city and Colorado as the state 
   
var q = 'SELECT \
    ?city ?state \
  WHERE {  \
    "Luna" &lt;city&gt; ?city . \
    ?city &lt;state&gt; ?state .  \
  } \
';

sem.sparql(
  q,
  null,
  null,
  sem.store(
    null,
    cts.andQuery((
      cts.collectionQuery("myTemporal"),
      cts.periodRangeQuery(
        "mySystem",
        "ISO_CONTAINS",
        cts.period(
          xs.dateTime("2007-01-01T00:00:00Z")) ),
      cts.periodRangeQuery(
        "myValid",
        "ISO_CONTAINS",
        cts.period(
          xs.dateTime("2004-01-01T00:00:00Z"),            
          xs.dateTime("2005-01-01T00:00:00Z")) )
    ))            
  )
)

 </query><query name="clear" focus="true" active="true" content-source="as:11162580126874597628:" mode="javascript">declareUpdate()
xdmp.collectionDelete("triples.json")</query></workspace></export>
