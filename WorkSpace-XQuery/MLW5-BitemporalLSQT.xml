<export><workspace name="MLW5-BitemporalLSQT"><query name="clearEnvironment" focus="false" active="true" content-source="as:875749716052773037:" mode="xquery">
fn:collection("myTemporal") ! xdmp:document-delete(xdmp:node-uri(.));
temporal:set-use-lsqt("myTemporal",fn:true())</query><query name="getLSQT" focus="false" active="true" content-source="as:875749716052773037:" mode="xquery">(:what is the value of LSQT now?
 you can also see a temporal.lsqt file, thats where the timestamp is stored:)

  temporal:get-lsqt("myTemporal")</query><query name="insert1" focus="false" active="true" content-source="as:875749716052773037:" mode="xquery">let $root := object-node{
"sysStart": null-node{},    
"sysEnd": null-node{},
"valStart": "2001-01-01T00:00:00Z",
"valEnd": "2010-01-01T00:00:00Z",
"data": "v1"}
    
return temporal:document-insert("myTemporal","doc1.json",$root),
temporal:statement-set-system-time(xs:dateTime("2000-01-01T00:00:00Z"))</query><query name="advanceLSQT" focus="false" active="true" content-source="as:875749716052773037:" mode="xquery">(: advanceLsqt("temporal",lag)    lag is in millisecond
 LSQT = max(systemStart) - lag
 No query after LSQT - ensured by cts.lsqtQuery() 
 No update before LSQT - ensured by temporal.documentInsert() :)
  
temporal:advance-lsqt("myTemporal",1000)</query><query name="insert2" focus="false" active="true" content-source="as:875749716052773037:" mode="xquery">(: for the same URI, system time has to move forward  :)
let $root := object-node{
"sysStart": null-node{},    
"sysEnd": null-node{},
"valStart": "2001-01-01T00:00:00Z",
"valEnd": "2010-01-01T00:00:00Z",
"data": "v1"}
    
return temporal:document-insert("myTemporal","doc1.json",$root),
temporal:statement-set-system-time(xs:dateTime("2000-01-01T00:00:00Z"))</query><query name="inserrt3" focus="false" active="true" content-source="as:875749716052773037:" mode="xquery">let $root := object-node{
"sysStart": null-node{},    
"sysEnd": null-node{},
"valStart": "2001-01-01T00:00:00Z",
"valEnd": "2010-01-01T00:00:00Z",
"data": "v1"}
    
return temporal:document-insert("myTemporal","doc2.json",$root),
temporal:statement-set-system-time(xs:dateTime("2000-01-01T00:00:00Z"))</query><query name="advanceLSQT" focus="false" active="true" content-source="as:875749716052773037:" mode="xquery">(: advanceLsqt("temporal",lag)    lag is in millisecond
 LSQT = max(systemStart) - lag
 No query after LSQT - ensured by cts.lsqtQuery() 
 No update before LSQT - ensured by temporal.documentInsert() :)
  
temporal:advance-lsqt("myTemporal",0)</query><query name="lsqtQuery" focus="false" active="true" content-source="as:875749716052773037:" mode="xquery">(:gives all the document before lsqt:)
  cts:search(fn:doc(),cts:lsqt-query("myTemporal"))</query><query name="insert4" focus="true" active="true" content-source="as:875749716052773037:" mode="xquery">(:system time has to be strictly larger than LSQT:)
let $root := object-node{
"sysStart": null-node{},    
"sysEnd": null-node{},
"valStart": "2001-01-01T00:00:00Z",
"valEnd": "2010-01-01T00:00:00Z",
"data": "v1"}
    
return temporal:document-insert("myTemporal","doc3.json",$root),
temporal:statement-set-system-time(xs:dateTime("2000-01-02T00:00:00Z"))</query><query name="lsqtQuery" focus="false" active="true" content-source="as:875749716052773037:" mode="xquery">(: gives all the document before lsqt :)

  cts:search(fn:doc(),cts:lsqt-query("myTemporal"))</query><query name="automation" focus="false" active="true" content-source="as:875749716052773037:" mode="xquery">(:background thread will advance lsqt every 1 second with lag of 2 seconds:)
  
  temporal:set-lsqt-automation("myTemporal",fn:true(),1000,2000)</query><query name="lsqtQUery" focus="false" active="true" content-source="as:875749716052773037:" mode="xquery">(:gives all the document before lsqt:)
  cts:search(fn:doc(),cts:lsqt-query("myTemporal"))</query></workspace></export>
